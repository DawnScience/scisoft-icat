/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.ac.diamond.scisoft.icatexplorer.rcp.icatclient;

import java.io.FileInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import uk.icat3.client.Dataset;
import uk.icat3.client.ICAT;
import uk.icat3.client.ICATService;
import uk.icat3.client.InsufficientPrivilegesException_Exception;
import uk.icat3.client.Investigation;
import uk.icat3.client.InvestigationInclude;
import uk.icat3.client.NoSuchObjectFoundException_Exception;
import uk.icat3.client.SessionException_Exception;

public class ICATClient{
	
	URL icatURL = null;
	private static final String WSDL_LOCATION_PROPERTY_NAME = "wsdl.location";
	private static final String PROPERTIES_FILENAME = "C:\\workspace\\sda\\sda_workspace\\plugins\\uk.ac.diamond.scisoft.icatexplorer.rcp\\conf\\icatexplorer.properties";//"icatexplorer.properties";
	private static final String TRUSTSTORE_PATH = "trustore.path";
	private static final String TRUSTSTORE_PASSWORD = "trustore.password";
		
	private static String wsdlLocation;
	protected static String truststorePath;
	protected static String truststorePassword;
	
	protected String fedid;
	protected String password; 
	protected String sessionId;
	
    private static final Logger logger = LoggerFactory.getLogger(ICATClient.class); 

	
	public static ICAT getIcat() throws Exception {
		
		URL icatServiceWsdlLocation = getServiceWsdlLocation();
				
		ICATService service = new ICATService(icatServiceWsdlLocation, new QName("client.icat3.uk", "ICATService"));
		return service.getICATPort();
	}

	private static void readConfigurationFile() throws Exception {
		
		logger.info("reading properties file");
				
		Properties properties = new Properties();
		properties.load(new FileInputStream(PROPERTIES_FILENAME));

		wsdlLocation = (String) properties.get(WSDL_LOCATION_PROPERTY_NAME);
		truststorePath = (String) properties.get(TRUSTSTORE_PATH);
		truststorePassword = (String) properties.get(TRUSTSTORE_PASSWORD);
				
	}

	private static URL getServiceWsdlLocation() throws MalformedURLException {
		URL baseUrl = uk.icat3.client.ICATService.class.getResource(".");
		return new URL(baseUrl, wsdlLocation);
	}
		

 	public ICATClient(){
 		try {
			readConfigurationFile();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		System.setProperty("javax.net.ssl.trustStore", truststorePath);//cacerts-dlstest00.jks");
    	System.setProperty("javax.net.ssl.trustStorePassword", truststorePassword);
	}
		
//    public String login(String fedid, String password) {
//    	    	
//    	ICAT icat;
//		try {
//			
//			icat = getIcat();
//			this.sessionId = icat.login(fedid, password);
//			logger.info("User " + this.fedid + " logged in - sessionID: "+ this.sessionId);			
//			this.fedid = fedid;
//		    this.password = password;
//						
//		} catch (Exception e) {
//			
//			//e.printStackTrace();
//			return null;			
//		}
//		
//		return this.sessionId;
//				
//    }
    
    public String login(String fedid, String password) {
    	
    	//uk.icat3.client.ICATAdminISISService icatAdminService = null;
        uk.icat3.client.admin.ICATAdmin icatAdminPort = null;
        //uk.icat3.client.ICATISISService icatService = null;
        uk.icat3.client.ICAT icatPort = null;

        try {

            // Call Web Service Operation
            URL adminURL = new URL("https://facilities02.esc.rl.ac.uk:8181/ICATAdminService/ICATAdmin?wsdl");//properties.getProperty("icatadmin_endpoint"));
            icatAdminPort = new uk.icat3.client.admin.ICATAdminService(adminURL, new QName("admin.client.icat3.uk", "ICATAdminService")).getICATAdminPort();

            ((BindingProvider)icatAdminPort).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "https://facilities02.esc.rl.ac.uk:8181/ICATAdminService/ICATAdmin?wsdl");//properties.getProperty("icatadmin_endpoint"));
            ((BindingProvider)icatAdminPort).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, "DLS-admin");//properties.getProperty("username"));
            ((BindingProvider)icatAdminPort).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "TaunWuOd5");//properties.getProperty("password"));            
                       
            /*URL*/ icatURL =  new URL("https://facilities02.esc.rl.ac.uk:8181/ICATService/ICAT?wsdl");//new URL(properties.getProperty("icat_endpoint"));
                        
            icatPort = new uk.icat3.client.ICATService(icatURL, new QName("client.icat3.uk", "ICATService")).getICATPort();
            ((BindingProvider)icatPort).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "https://facilities02.esc.rl.ac.uk:8181/ICATService/ICAT?wsdl");//properties.getProperty("icat_endpoint"));

            logger.debug("Logging in...");
            //username = this.username; //"cm65";//cnp64921";//"GUARDIAN";
            this.sessionId = icatAdminPort.loginAdmin(fedid);
            this.fedid = fedid;
            this.password = password;
            
            logger.debug("SessionId = " + sessionId);

            //ingest here
            
            //List<Long> ids = icatPort.ingestMetadata(sessionId, buffer);
            //for (Long id : ids) System.out.println("id: " + id);

            

        } catch (Exception ex) {
            //ex.printStackTrace();
            return null;
        }
        
        return this.sessionId;
				
    }
      
    public void logout() {
    	
    	ICAT icat;
		try {			
			icat = getIcat();
			icat.logout(this.sessionId); 
			logger.info("User " + this.fedid + " logged out");			
		} catch (Exception e) {
			e.printStackTrace();
		}
				
    }
    
    
    public List<Investigation> getLightInvestigations() throws MalformedURLException, SessionException_Exception, InsufficientPrivilegesException_Exception, NoSuchObjectFoundException_Exception{
        
    	ICAT icat;
    	List<Investigation> myInvestigations = null;
		try {
			
			long startTime = System.currentTimeMillis();
			icat = getIcat();
			//int maxNbReturnedInv = 1;
	    	logger.info("Calling getInvestigations()...");
			myInvestigations = icat.getMyInvestigationsIncludes(this.sessionId, InvestigationInclude.NONE /*.DATASETS_ONLY*/);
					//.getMyInvestigationsIncludesPagination(this.sessionId, InvestigationInclude.DATASETS_AND_DATAFILES, 0, maxNbReturnedInv );
			
			long endTime = System.currentTimeMillis();
			long millis = endTime - startTime;

	        logger.info("execution time to retrieve [" + myInvestigations.size() + "] DATASETS is: " +String.format("%d min, %d sec", 		
				    TimeUnit.MILLISECONDS.toMinutes(millis),
				    TimeUnit.MILLISECONDS.toSeconds(millis) - 
				    TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))
				));
	        
			//List <Investigation> resultInvestigations = completeInvestigations(myInvestigations);
	        //logger.info((myInvestigations.get(0)).getDatasetCollection().size());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	        
        return myInvestigations; 
    }

//public List<Dataset> getDatasets() throws MalformedURLException, SessionException_Exception, InsufficientPrivilegesException_Exception, NoSuchObjectFoundException_Exception{
//        
//    	ICAT icat;
//    	List<Dataset> myDatasets = null;
//		try {
//			
//			long startTime = System.currentTimeMillis();
//			icat = getIcat();
//			//int maxNbReturnedInv = 1;
//	    	logger.info("Calling getDatasets()...");
//			myDatasets = icat.getD.getMyInvestigationsIncludes(this.sessionId, InvestigationInclude.DATASETS_ONLY);
//					//.getMyInvestigationsIncludesPagination(this.sessionId, InvestigationInclude.DATASETS_AND_DATAFILES, 0, maxNbReturnedInv );
//			
//			long endTime = System.currentTimeMillis();
//			long millis = endTime - startTime;
//
//	        logger.info("execution time to retrieve [" + myDatasets.size() + "] DATASETS is: " +String.format("%d min, %d sec", 		
//				    TimeUnit.MILLISECONDS.toMinutes(millis),
//				    TimeUnit.MILLISECONDS.toSeconds(millis) - 
//				    TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))
//				));
//	        
//			//List <Investigation> resultInvestigations = completeInvestigations(myInvestigations);
//	        //logger.info((myInvestigations.get(0)).getDatasetCollection().size());
//			
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//    	        
//        return myDatasets; 
//    }

	public String getSessionId() {
		// TODO Auto-generated method stub
		return this.sessionId;
	}
	
	public String getFedId() {
		// TODO Auto-generated method stub
		return this.fedid;
	}
	
	public void setFedId(String fedid) {
		// TODO Auto-generated method stub
		this.fedid = fedid;
	}
	
	public void setPassword(String password) {
		// TODO Auto-generated method stub
		this.password = password;
	}

	public List<Dataset> getDatasets(Long id) {

		ICAT icat;
		List<Dataset> datasets = null;
		try {
			icat = getIcat();
			Investigation newInv = icat.getInvestigationIncludes(this.sessionId, id,
					InvestigationInclude.DATASETS_AND_DATASET_PARAMETERS_ONLY);

			datasets = newInv.getDatasetCollection();
			logger.debug("dataset colleciton size: "
					+ newInv.getDatasetCollection().size());
//			for (int i = 0; i < newInv.getDatasetCollection().size(); i++) {
//
//				System.out.println("dataset  (" + i + ")'s id : "
//						+ newInv.getDatasetCollection().get(i).getId());
//				System.out.println("dataset  (" + i + ")'s name : "
//						+ newInv.getDatasetCollection().get(i).getName());
//
//			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return datasets;
	}

	public String getPassword() {
		// TODO Auto-generated method stub
		return this.password;
	}
    

//	public List<Investigation> completeInvestigations(List skeletonInvestigations) throws InsufficientPrivilegesException_Exception, NoSuchObjectFoundException_Exception, SessionException_Exception {
//		//uk.icat3.client.ICAT icatPort = null;
//		long invid;
//		List<Investigation> completeInvestigations =  new ArrayList <Investigation>();
//		
//		//icatPort = new uk.icat3.client.ICATService(icatURL, new QName("client.icat3.uk", "ICATService")).getICATPort();
//        //((BindingProvider)icatPort).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "https://facilities02.esc.rl.ac.uk:8181/ICATService/ICAT?wsdl");//properties.getProperty("icat_endpoint"));
//		((BindingProvider)icatPort).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, properties.getProperty(endpointUrl));
//
//        
//		for (int h = 0; h < skeletonInvestigations.size(); h++) {
//			uk.icat3.client.Investigation inv = (uk.icat3.client.Investigation)skeletonInvestigations.get(h);
//			invid = inv.getId() ;
//			//logger.info("\ninvid = "+invid);
//			//logger.info("\nsessionId = "+sessionId);
//			
//			//invid = (long) 10826625 ; // TO REMOVE TESTING ONLY
//			uk.icat3.client.Investigation fullInvestigation =  icatPort.getInvestigationIncludes(sessionId, invid, InvestigationInclude.DATASETS_ONLY);
//			
//			System.out.println("\nfullInvestigation with id "+ invid + " contains " + fullInvestigation.getDatasetCollection().size() +" dataset collections");
//
//						
//			//myInvestigationsIds.add(invid);	
//			completeInvestigations.add(fullInvestigation);
//			//logger.info("\ncompleteInvestigations.size() now : " + completeInvestigations.size());
//		}
//		return completeInvestigations;
//	}
//	
    
//    void setFedid(String fedid){
//    	this.fedid = fedid;
//    }
    
//    public URL getIcatURL(){
//    	return this.icatURL;
//    }
//    
//    public String getFedid(){
//    	return this.username;
//    }
    
	/* *
	 * Reads properties from configuration file.
	 * @returns set of properties
	 */
//	public static Properties readConfigFile() {
//		ResourceBundle bundle = null;
//		Properties properties = null;
//
//		boolean trustorePathVerified = false;
//		boolean truststorePasswordVerified = false;
//		
//		boolean endpointAdminUrlVerified = false;
//		boolean namespaceAdminUriVerified = false;
//		boolean namespaceAdminLocalpartVerified = false;
//		boolean adminUsernameVerified = false;
//		boolean adminPasswordVerified = false;
//
//		boolean endpointUrlVerified = false;
//		boolean namespaceUriVerified = false;
//		boolean namespaceLocalPartVeried = false;
//				
//		
//		try {
//			bundle = new PropertyResourceBundle(ICATClient.class.getResourceAsStream("icatexplorer.properties"));
//			System.out.println("\nProperties file successfully loaded!");
//					
//			properties = new Properties();
//			Enumeration<String> keys = bundle.getKeys();
//			//logger.info("keys.size" + bundle.toString());
//
//			while (keys.hasMoreElements()) {
//				String prop = (String) keys.nextElement();
//				String val = bundle.getString(prop);
//
//				// check whether all required keys and (non null) values are
//				// present
//				if ((prop != null) && (prop.equals("trustore.path"))) {
//					if ((val != null) && (val.length() > 0))
//						trustorePathVerified = true;
//				}
//				if ((prop != null) && (prop.equals("truststore.password"))) {
//					if ((val != null) && (val.length() > 0))
//						truststorePasswordVerified = true;
//				}
//				if ((prop != null) && (prop.equals("endpoint.admin.url"))) {
//					if ((val != null) && (val.length() > 0))
//						endpointAdminUrlVerified = true;
//				}
//				if ((prop != null) && (prop.equals("namespace.admin.uri"))) {
//					if ((val != null) && (val.length() > 0))
//						namespaceAdminUriVerified = true;
//				}
//				if ((prop != null) && (prop.equals("namespace.admin.localpart"))) {
//					if ((val != null) && (val.length() > 0))
//						namespaceAdminLocalpartVerified = true;
//				}
//				if ((prop != null) && (prop.equals("admin.username"))) {
//					if ((val != null) && (val.length() > 0))
//						adminUsernameVerified = true;
//				}
//				if ((prop != null) && (prop.equals("admin.password"))) {
//					if ((val != null) && (val.length() > 0))
//						adminPasswordVerified = true;
//				}				
//				if ((prop != null) && (prop.equals("endpoint.url"))) {
//					if ((val != null) && (val.length() > 0))
//						endpointUrlVerified = true;
//				}
//				if ((prop != null) && (prop.equals("namespace.uri"))) {
//					if ((val != null) && (val.length() > 0))
//						namespaceUriVerified = true;
//				}
//				if ((prop != null) && (prop.equals("namespace.localpart"))) {
//					if ((val != null) && (val.length() > 0))
//						namespaceLocalPartVeried = true;
//				}
//
//				properties.setProperty(prop, val);
//			}// end while
//			
//			
//			// in case one of the keys/values is missing
//			if (!trustorePathVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that truststore path key is supplied'");
//			if (!truststorePasswordVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that truststore password key is supplied");
//			if (!endpointAdminUrlVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that admin url key is supplied");
//			if (!namespaceAdminUriVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that admin uri key is supplied");
//			if (!namespaceAdminLocalpartVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that namespace admin local key is supplied");			
//			if (!adminUsernameVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that username key is supplied");
//			if (!adminPasswordVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that password key is supplied");
//			if (!endpointUrlVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that endpoint url key is supplied");
//			if (!namespaceUriVerified)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that namespace uri key is supplied");
//			if (!namespaceLocalPartVeried)
//				throw new Exception(
//						"Please check plugin.properties file to ensure that namespace local part key is supplied");
//
//		} catch (Exception io) {
//			io.printStackTrace();
//			System.exit(0);
//		}// end try/catch
//
//		return properties;
//	}
}
